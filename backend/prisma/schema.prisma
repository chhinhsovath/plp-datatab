// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  passwordHash String  @map("password_hash")
  createdAt   DateTime @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")
  
  // Relations
  ownedProjects       Project[] @relation("ProjectOwner")
  collaborations      ProjectCollaborator[]
  datasets            Dataset[]
  comments            Comment[]
  activities          Activity[]
  reports             Report[]
  reportCollaborations ReportCollaborator[]
  reportVersions      ReportVersion[]
  reportComments      ReportComment[]
  reportActivities    ReportActivity[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String   @map("owner_id")
  isArchived  Boolean  @default(false) @map("is_archived")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner         User                  @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  datasets      Dataset[]
  analyses      Analysis[]
  reports       Report[]
  visualizations Visualization[]
  comments      Comment[]
  activities    Activity[]
  
  @@map("projects")
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  role      CollaboratorRole
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("project_collaborators")
}

model Dataset {
  id         String   @id @default(cuid())
  name       String
  filePath   String   @map("file_path")
  fileSize   Int      @map("file_size")
  metadata   Json
  userId     String   @map("user_id")
  projectId  String?  @map("project_id")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  analyses   Analysis[]
  
  @@map("datasets")
}

model Analysis {
  id         String   @id @default(cuid())
  name       String
  type       AnalysisType
  parameters Json
  results    Json?
  status     AnalysisStatus @default(PENDING)
  datasetId  String   @map("dataset_id")
  projectId  String   @map("project_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  dataset        Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  visualizations Visualization[]
  
  @@map("analyses")
}

model Visualization {
  id         String   @id @default(cuid())
  name       String
  type       VisualizationType
  config     Json
  analysisId String?  @map("analysis_id")
  projectId  String   @map("project_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  analysis   Analysis? @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("visualizations")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  sections    Json
  templateId  String?  @map("template_id")
  version     Int      @default(1)
  isPublic    Boolean  @default(false) @map("is_public")
  userId      String   @map("user_id")
  projectId   String   @map("project_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template        ReportTemplate?       @relation(fields: [templateId], references: [id], onDelete: SetNull)
  collaborators   ReportCollaborator[]
  versions        ReportVersion[]
  comments        ReportComment[]
  activities      ReportActivity[]
  
  @@map("reports")
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  sections    Json
  styling     Json
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  reports     Report[]
  
  @@map("report_templates")
}

model ReportCollaborator {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  reportId    String   @map("report_id")
  role        CollaboratorRole
  permissions Json
  joinedAt    DateTime @default(now()) @map("joined_at")
  
  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  report      Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@unique([userId, reportId])
  @@map("report_collaborators")
}

model ReportVersion {
  id        String   @id @default(cuid())
  reportId  String   @map("report_id")
  version   Int
  title     String
  sections  Json
  createdBy String   @map("created_by")
  changeLog String?  @map("change_log")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  report    Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  creator   User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@unique([reportId, version])
  @@map("report_versions")
}

model ReportComment {
  id        String   @id @default(cuid())
  reportId  String   @map("report_id")
  sectionId String?  @map("section_id")
  userId    String   @map("user_id")
  content   String
  parentId  String?  @map("parent_id")
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  report    Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    ReportComment? @relation("ReportCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   ReportComment[] @relation("ReportCommentReplies")
  
  @@map("report_comments")
}

model ReportActivity {
  id        String           @id @default(cuid())
  reportId  String           @map("report_id")
  userId    String           @map("user_id")
  action    ReportActionType
  details   String
  timestamp DateTime         @default(now())
  
  // Relations
  report    Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("report_activities")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  parentId  String?  @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  details   Json
  userId    String       @map("user_id")
  projectId String       @map("project_id")
  createdAt DateTime     @default(now()) @map("created_at")
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

// Enums
enum CollaboratorRole {
  VIEWER
  EDITOR
  ADMIN
}

enum AnalysisType {
  DESCRIPTIVE
  TTEST
  ANOVA
  CORRELATION
  REGRESSION
  CHISQUARE
  NONPARAMETRIC
}

enum AnalysisStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum VisualizationType {
  BAR
  LINE
  SCATTER
  HISTOGRAM
  BOXPLOT
  HEATMAP
  PIE
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  DATASET_UPLOADED
  ANALYSIS_CREATED
  ANALYSIS_COMPLETED
  REPORT_GENERATED
  USER_INVITED
  COMMENT_ADDED
}

enum ReportActionType {
  CREATED
  UPDATED
  COMMENTED
  EXPORTED
  SHARED
  VERSION_CREATED
  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
}